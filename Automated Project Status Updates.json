{
  "name": "Automated Project Status Updates",
  "nodes": [
    {
      "parameters": {
        "content": "\n## An Automated Project Status Updates",
        "height": 80,
        "width": 500
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-720, -360],
      "id": "88e618cd-6b2f-45c1-9824-18f8751afd06",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Phase 1: Trigger & Initialization",
        "height": 260,
        "width": 340
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1420, -200],
      "id": "c5fe3608-e0b3-44fc-a5bd-72557d12a03a",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Phase 2: Data Extraction & Preparation\n\n",
        "height": 260,
        "width": 460
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1060, -200],
      "id": "a036589d-a45f-4337-879c-b6dd42626752",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## Phase 3: AI Analysis & Content Generation\n\n\n",
        "height": 260,
        "width": 440
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-560, -200],
      "id": "798dadb5-5cba-425b-9704-455bb6095b5e",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "## Phase 4: Action & Confirmation\n\n\n",
        "height": 280,
        "width": 500
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-100, -220],
      "id": "50bd0cc4-3125-45f6-b572-6e7387076ae0",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "## Error Handling",
        "height": 240,
        "width": 480
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [-1260, 260],
      "id": "3a4f6939-f6fe-4436-8f60-7d6fb3655b1d",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "rule": {
          "interval": [{}]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [-1400, -120],
      "id": "e706a97a-0bb7-414a-a938-6680d1e2bb2d",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "jsCode": "// Calculate 7-day time window with validation and logging\nconst now = $now;\nconst sevenDaysAgo = now.minus({ days: 7 });\nconst sevenDaysAgoTs = Math.floor(sevenDaysAgo.toMillis() / 1000);\n\n// Validate timestamp\nif (sevenDaysAgoTs <= 0) {\n  throw new Error('Invalid timestamp calculation');\n}\n\n// Log execution start\nconsole.log('Workflow execution started:', {\n  executionId: $execution.id,\n  workflowId: $workflow.id,\n  timestamp: now.toISOString(),\n  sevenDaysAgoTs,\n  timeWindow: '7 days'\n});\n\nreturn [{ \n  json: { \n    sevenDaysAgoTs,\n    executionStart: now.toISOString(),\n    workflowId: $workflow.id,\n    executionId: $execution.id\n  } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-1240, -120],
      "id": "18b44c77-76e6-4351-8915-9645acde43bc",
      "name": "Calculate Start Date"
    },
    {
      "parameters": {
        "resource": "channel",
        "operation": "getAllMessages",
        "channel": "C06RBD7B35E",
        "options": {
          "oldest": "={{ $('Calculate Start Date').item.json.sevenDaysAgoTs }}",
          "limit": 200
        }
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [-1040, -120],
      "id": "fe8ad022-f58c-419d-a072-36150febb05f",
      "name": "Slack Project Channel",
      "webhookId": "0083fbeb-e343-4bb7-a944-0c8bb9731f4c",
      "credentials": {
        "slackApi": {
          "id": "ZOhAUnNqZ9m22YXN",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "={{ $json.length }}",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "4407e653-9314-4f54-8ee1-ff9b6fd578fc",
              "leftValue": "={{ $json.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "larger",
                "name": "is larger"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [-900, -120],
      "id": "99fdef73-319b-4837-9245-5c6c4dfdb096",
      "name": "Data Check"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [-780, 100],
      "id": "5b26e1c2-618f-4ff6-bd69-64f60a0b101d",
      "name": "No Operation, do nothing"
    },
    {
      "parameters": {
        "jsCode": "// Enhanced message processing with validation, error handling, and comprehensive logging\nconst messages = $input.all();\nconst relevantMessages = [];\nlet processedCount = 0;\nlet skippedCount = 0;\nlet hubspotCount = 0;\nlet errorCount = 0;\n\n// Input validation with detailed logging\nconsole.log('Starting message processing:', {\n  totalMessages: messages.length,\n  executionId: $execution.id,\n  timestamp: $now.toISOString()\n});\n\nif (!Array.isArray(messages) || messages.length === 0) {\n  console.log('No messages found or invalid input format');\n  return [{ \n    json: { \n      slackLog: '', \n      processedCount: 0, \n      skippedCount: 0, \n      hubspotCount: 0, \n      errorCount: 0,\n      totalMessages: 0,\n      processingStatus: 'NO_MESSAGES'\n    } \n  }];\n}\n\n// Process each message with comprehensive error handling\nfor (const item of messages) {\n  try {\n    const message = item.json;\n    \n    // Validate message structure\n    if (!message || typeof message !== 'object') {\n      skippedCount++;\n      continue;\n    }\n\n    // Skip system messages and bots\n    if (message.subtype === 'channel_join' || \n        message.subtype === 'channel_leave' || \n        message.subtype === 'bot_message' ||\n        message.subtype === 'channel_topic' ||\n        message.subtype === 'channel_purpose') {\n      skippedCount++;\n      continue;\n    }\n\n    let formattedMessage = '';\n    const messageDate = new Date(message.ts * 1000).toLocaleDateString('de-DE');\n\n    // Enhanced HubSpot meeting notes detection\n    if (message.user_profile?.name === 'HubSpot' || \n        message.username === 'HubSpot' || \n        message.user === 'HubSpot') {\n      const text = message.attachments?.[0]?.text || message.text || '';\n      if (text.includes('Zusammenfassung:') || \n          text.includes('NÃ¤chste Schritte:') || \n          text.includes('Meeting Summary') ||\n          text.includes('Summary:')) {\n        formattedMessage = `\\n=== MEETING SUMMARY on ${messageDate} ===\\n${text}\\n=== END SUMMARY ===\\n`;\n        hubspotCount++;\n      }\n    } else if (message.text && message.text.trim()) {\n      // Process regular user messages with enhanced sanitization\n      const userName = message.user_profile?.display_name || \n                       message.user_profile?.real_name || \n                       message.user || 'Unknown User';\n      \n      // Enhanced XSS prevention and content sanitization\n      const sanitizedText = message.text\n        .replace(/[<>]/g, '')\n        .replace(/&/g, '&amp;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#x27;');\n        \n      formattedMessage = `[${userName}] on [${messageDate}]: ${sanitizedText}`;\n    }\n\n    if (formattedMessage) {\n      relevantMessages.push(formattedMessage);\n      processedCount++;\n    } else {\n      skippedCount++;\n    }\n  } catch (error) {\n    errorCount++;\n    console.error('Error processing message:', {\n      error: error.message,\n      messageId: item.json?.ts || 'unknown',\n      executionId: $execution.id\n    });\n  }\n}\n\n// Combine messages with comprehensive processing stats\nconst consolidatedLog = relevantMessages.join('\\n---\\n');\n\n// Log processing results\nconsole.log('Message processing completed:', {\n  processedCount,\n  skippedCount,\n  hubspotCount,\n  errorCount,\n  totalMessages: messages.length,\n  logLength: consolidatedLog.length,\n  executionId: $execution.id\n});\n\nreturn [{ \n  json: { \n    slackLog: consolidatedLog,\n    processedCount,\n    skippedCount,\n    hubspotCount,\n    errorCount,\n    totalMessages: messages.length,\n    processingStatus: 'COMPLETED'\n  } \n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-740, -140],
      "id": "0486ae71-4022-4d52-a320-8375d6a9ceea",
      "name": "Validating Project Data"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [-540, -120],
      "id": "a7057341-719a-425e-b181-fc6897b9b7e7",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [-520, 40],
      "id": "b6f9128d-a94a-44f2-89db-9eb2cf6ef242",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "QK7gPHgHICV4nP2G",
          "name": "Gemini(PaLM) Api "
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Enhanced AI output validation with comprehensive error handling and retry logic\nconst aiResponse = $input.item.json.output || $input.item.json.response || $input.item.json.text || '';\n\n// Log AI response for debugging\nconsole.log('AI Response received:', {\n  responseLength: aiResponse.length,\n  responsePreview: aiResponse.substring(0, 200),\n  executionId: $execution.id,\n  timestamp: $now.toISOString()\n});\n\n// Input validation with detailed error reporting\nif (!aiResponse || typeof aiResponse !== 'string') {\n  const errorMsg = `Invalid AI response type: ${typeof aiResponse}. Expected string. Response: ${JSON.stringify(aiResponse).substring(0, 200)}`;\n  console.error('AI Response validation failed:', errorMsg);\n  throw new Error(errorMsg);\n}\n\nif (aiResponse.trim().length === 0) {\n  const errorMsg = 'AI response is empty or contains only whitespace';\n  console.error('AI Response validation failed:', errorMsg);\n  throw new Error(errorMsg);\n}\n\n// Check for common AI error patterns\nif (aiResponse.toLowerCase().includes('error') || \n    aiResponse.toLowerCase().includes('sorry') || \n    aiResponse.toLowerCase().includes('cannot') ||\n    aiResponse.toLowerCase().includes('unable')) {\n  console.warn('AI response contains potential error indicators:', aiResponse.substring(0, 200));\n}\n\ntry {\n  // Attempt to parse the AI's response\n  let parsedJson;\n  \n  // Try to extract JSON if it's wrapped in markdown or other text\n  const jsonMatch = aiResponse.match(/\\{[\\s\\S]*\\}/);\n  if (jsonMatch) {\n    parsedJson = JSON.parse(jsonMatch[0]);\n  } else {\n    parsedJson = JSON.parse(aiResponse);\n  }\n  \n  // Validate required fields with detailed error reporting\n  const requiredFields = ['subject', 'greeting', 'summary', 'completed_tasks', 'next_steps', 'closing'];\n  const missingFields = requiredFields.filter(field => !parsedJson.hasOwnProperty(field));\n  \n  if (missingFields.length > 0) {\n    const errorMsg = `Missing required fields: ${missingFields.join(', ')}. Available fields: ${Object.keys(parsedJson).join(', ')}`;\n    console.error('AI Response validation failed:', errorMsg);\n    throw new Error(errorMsg);\n  }\n  \n  // Validate field types and content\n  if (typeof parsedJson.subject !== 'string' || parsedJson.subject.trim().length === 0) {\n    throw new Error('Subject field is missing, empty, or not a string');\n  }\n  \n  if (!Array.isArray(parsedJson.completed_tasks) || !Array.isArray(parsedJson.next_steps)) {\n    throw new Error('completed_tasks and next_steps must be arrays');\n  }\n  \n  if (parsedJson.completed_tasks.length === 0 && parsedJson.next_steps.length === 0) {\n    console.warn('Both completed_tasks and next_steps arrays are empty');\n  }\n  \n  // Enhanced content sanitization to prevent XSS and ensure quality\n  const sanitizedJson = {\n    subject: parsedJson.subject.replace(/[<>]/g, '').trim(),\n    greeting: parsedJson.greeting.replace(/[<>]/g, '').trim(),\n    summary: parsedJson.summary.replace(/[<>]/g, '').trim(),\n    completed_tasks: parsedJson.completed_tasks.map(task => \n      task.replace(/[<>]/g, '').trim()\n    ).filter(task => task.length > 0),\n    next_steps: parsedJson.next_steps.map(step => \n      step.replace(/[<>]/g, '').trim()\n    ).filter(step => step.length > 0),\n    closing: parsedJson.closing.replace(/[<>]/g, '').trim()\n  };\n  \n  // Validate content quality\n  if (sanitizedJson.subject.length > 100) {\n    console.warn('Subject is longer than recommended (100 chars):', sanitizedJson.subject.length);\n  }\n  \n  if (sanitizedJson.summary.length < 50) {\n    console.warn('Summary seems too short:', sanitizedJson.summary.length);\n  }\n  \n  // Log successful validation\n  console.log('AI Response validation successful:', {\n    subjectLength: sanitizedJson.subject.length,\n    completedTasksCount: sanitizedJson.completed_tasks.length,\n    nextStepsCount: sanitizedJson.next_steps.length,\n    executionId: $execution.id\n  });\n  \n  return [{ json: sanitizedJson }];\n} catch (error) {\n  // Enhanced error reporting with context\n  const errorMessage = error instanceof SyntaxError \n    ? `AI returned invalid JSON syntax. Response preview: ${aiResponse.substring(0, 300)}...`\n    : `AI response validation failed: ${error.message}. Response preview: ${aiResponse.substring(0, 300)}...`;\n  \n  console.error('AI Response processing failed:', {\n    error: errorMessage,\n    executionId: $execution.id,\n    timestamp: $now.toISOString()\n  });\n  \n  throw new Error(errorMessage);\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [-240, -120],
      "id": "4f34923c-f565-4a08-a00d-4d29a8b09817",
      "name": "Output Formatting",
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.wait",
      "typeVersion": 1.1,
      "position": [-140, 80],
      "id": "0d0a37b3-5299-4e21-8be8-2a2e038c5980",
      "name": "Wait",
      "webhookId": "385e742d-cb9d-4175-9784-10421bacdc56"
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "subject",
              "value": "={{ $('Output Formatting').item.json.subject }}"
            },
            {
              "name": "htmlBody",
              "value": "={{ $('Output Formatting').item.json.greeting }}\\n\\n<p>{{ $('Output Formatting').item.json.summary }}</p>\\n\\n<b>Erledigte Aufgaben:</b>\\n<ul>\\n{{ $('Output Formatting').item.json.completed_tasks.map(task => `<li>${task}</li>`).join('\\\\n') }}\\n</ul>\\n\\n<b>NÃ¤chste Schritte:</b>\\n<ul>\\n{{ $('Output Formatting').item.json.next_steps.map(step => `<li>${step}</li>`).join('\\\\n') }}\\n</ul>\\n\\n<p>{{ $('Output Formatting').item.json.closing }}<br>Jan Hendrik Langbeck</p>"
            },
            {
              "name": "previewText",
              "value": "={{ $('Output Formatting').item.json.summary }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [-40, -140],
      "id": "a704ff19-6480-4328-9414-894d0959615a",
      "name": "Compose The Email"
    },
    {
      "parameters": {
        "resource": "draft",
        "subject": "={{ $('Compose The Email').item.json.subject }}",
        "message": "={{ $('Compose The Email').item.json.htmlBody }}",
        "options": {
          "to": "client.email@example.com"
        }
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [120, -140],
      "id": "79667f64-fdb9-4c7a-b448-9df84db0e21c",
      "name": "Gmail",
      "webhookId": "84927c22-aebf-4575-a065-bc3698290d9b",
      "credentials": {
        "gmailOAuth2": {
          "id": "HlMfe7wkfcPlvmsq",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C090GTTUKB6",
          "mode": "list",
          "cachedResultName": "all-automation-dev-space"
        },
        "text": "ð¯ *WÃ¶chentliches Kunden-Update fÃ¼r CCL ist fertig!* \\n\\nEin neuer E-Mail-Entwurf wurde fÃ¼r den Kunden generiert und wartet auf ÃberprÃ¼fung im Entwurfsordner von Jan.\\n\\n*â¡ï¸ <{{ $('Gmail').item.json.threadUrl }}|E-Mail-Entwurf hier prÃ¼fen und senden>*\\n\\n--- \\n*Vorschau des Inhalts:*\\n> *Betreff:* {{ $('Compose The Email').item.json.subject }}\\n> {{ $('Compose The Email').item.json.previewText }}\\n\\n*ð Verarbeitungsstatistiken:*\\nâ¢ Verarbeitete Nachrichten: {{ $('Validating Project Data').item.json.processedCount }}\\nâ¢ HubSpot Zusammenfassungen: {{ $('Validating Project Data').item.json.hubspotCount }}\\nâ¢ Ãbersprungene Nachrichten: {{ $('Validating Project Data').item.json.skippedCount }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [260, -140],
      "id": "35d2e153-6fa8-465e-8a75-57ef61457d19",
      "name": "Slack",
      "webhookId": "9439866d-613e-4c15-b0d2-548b6edd2380",
      "credentials": {
        "slackApi": {
          "id": "ZOhAUnNqZ9m22YXN",
          "name": "Slack account"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.errorTrigger",
      "typeVersion": 1,
      "position": [-1220, 340],
      "id": "06129c3d-0b1d-4706-9a00-3e41734c2d1c",
      "name": "Error Trigger"
    },
    {
      "parameters": {
        "select": "channel",
        "channelId": {
          "__rl": true,
          "value": "C090DURJ0HK",
          "mode": "list",
          "cachedResultName": "workflow-errors"
        },
        "text": "ð¨ *Fehler im Workflow 'Automated Project Status Updates'* ð¨\\n\\n*Workflow:* `{{$workflow.name}}`\\n*Fehlerhafter Knoten:* `{{$json.error.node.name}}`\\n*Fehlermeldung:* ```{{$json.error.message}}```\\n*Execution URL:* {{$execution.url}}\\n*Zeitstempel:* {{$now}}\\n\\n*ð Verarbeitungsstatistiken:*\\n{{ $('Validating Project Data') ? `â¢ Verarbeitete Nachrichten: ${$('Validating Project Data').item.json.processedCount || 0}\\nâ¢ HubSpot Zusammenfassungen: ${$('Validating Project Data').item.json.hubspotCount || 0}\\nâ¢ Ãbersprungene Nachrichten: ${$('Validating Project Data').item.json.skippedCount || 0}` : 'Keine Daten verfÃ¼gbar' }}",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [-1000, 340],
      "id": "748dc4e8-e030-4cd1-8235-fb0dc754f685",
      "name": "Slack1",
      "webhookId": "62e8686f-ca0c-4279-9af1-462bd35fce85",
      "credentials": {
        "slackApi": {
          "id": "ZOhAUnNqZ9m22YXN",
          "name": "Slack account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Validating Project Data": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Calculate Start Date",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Slack Project Channel": {
      "main": [
        [
          {
            "node": "Data Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Check": {
      "main": [
        [
          {
            "node": "Validating Project Data",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Output Formatting",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Output Formatting": {
      "main": [
        [
          {
            "node": "Compose The Email",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Wait",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gmail": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Wait": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Compose The Email": {
      "main": [
        [
          {
            "node": "Gmail",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Start Date": {
      "main": [
        [
          {
            "node": "Slack Project Channel",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Error Trigger": {
      "main": [
        [
          {
            "node": "Slack1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "errorWorkflow": "06129c3d-0b1d-4706-9a00-3e41734c2d1c",
    "executionOrder": "v1"
  },
  "versionId": "1e72db87-5483-4492-a564-a203da5c6f65",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "8e58eb7146c9984eb591b78514f724ac4bb75c7185b48e47fa000476c831d362"
  },
  "id": "AvqA8IXblNRpxyww",
  "tags": []
}
